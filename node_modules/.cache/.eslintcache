[{"/Users/kylemorris/workspace/workshop_demo_storygen/src/index.js":"1","/Users/kylemorris/workspace/workshop_demo_storygen/src/reportWebVitals.js":"2","/Users/kylemorris/workspace/workshop_demo_storygen/src/App.js":"3","/Users/kylemorris/workspace/workshop_demo_storygen/src/components/StoryPage.js":"4"},{"size":535,"mtime":1663321921699,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1663321921699,"results":"7","hashOfConfig":"6"},{"size":1870,"mtime":1663350407336,"results":"8","hashOfConfig":"6"},{"size":198,"mtime":1663321921698,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ocqntl",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/kylemorris/workspace/workshop_demo_storygen/src/index.js",[],[],"/Users/kylemorris/workspace/workshop_demo_storygen/src/reportWebVitals.js",[],[],"/Users/kylemorris/workspace/workshop_demo_storygen/src/App.js",["24","25","26","27"],[],"import logo from './logo.svg';\nimport './App.css';\nimport StoryPage from './components/StoryPage.js';\nimport React, { useState, useEffect } from 'react';\nconst banana = require('@banana-dev/banana-dev');\n\nfunction App() {\n    const [prompt, setPrompt] = useState(\"\");\n    const [images, setImages] = useState([]);\n    console.log(prompt)\n\n    useEffect(() => {\n      // update image list on page\n    },[]);\n\n    const summarize = async (prompt) => {\n      const { Configuration, OpenAIApi } = require(\"openai\");\n\n      const configuration = new Configuration({\n        apiKey: process.env.OPENAI_API_KEY,\n      });\n      const openai = new OpenAIApi(configuration);\n\n      const response = await openai.createCompletion({\n        model: \"text-davinci-002\",\n        prompt: \"Summarize this in one sentence\\n\\n\" + prompt + \"\\n\",\n        temperature: 0.7,\n        max_tokens: 256,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0,\n      });\n    }\n\n\n    const generateImage = async () => {\n      //call banana\n      const summary = summarize(prompt)\n      console.log(summary)\n      const promptModded = \"A clear, high quality photo showing that \" + summary + \"highly detailed, cinematic lighting, digital art\"\n      const out = await banana.run(\"48e6f984-4f85-4b8a-a2aa-6ade981c129e\", \"cee3a79a-7983-4f39-9974-9fce016fc809\", {\"prompt\": prompt})\n      setImages([...images, {\"text\": promptModded, \"image\": out.modelOutputs[0].image_base64}]);\n    }\n\n    return (\n      <div>\n          <input type=\"text\" name=\"prompt\" onChange={(e) => {setPrompt(e.target.value)}} />\n          <button onClick={() => {generateImage(prompt)}}>\n            Generate story page\n          </button>\n        {images.map((img) => { return (<p>{img['text']}<img src={\"data:image/png;base64,\" + img['image']} /></p>)\n        })}\n      </div>\n    );\n}\n\nexport default App;\n","/Users/kylemorris/workspace/workshop_demo_storygen/src/components/StoryPage.js",["28"],[],"function StoryPage(text, image) {\n   return (\n      <div>\n        {text}\n        <img src={\"data:image/png;base64,\" + image} /> \n        <br></br>\n      </div>\n \n    );\n}\n\nexport default StoryPage;\n",{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":17},{"ruleId":"29","severity":1,"message":"34","line":24,"column":13,"nodeType":"31","messageId":"32","endLine":24,"endColumn":21},{"ruleId":"35","severity":1,"message":"36","line":51,"column":56,"nodeType":"37","endLine":51,"endColumn":109},{"ruleId":"35","severity":1,"message":"36","line":5,"column":9,"nodeType":"37","endLine":5,"endColumn":55},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'StoryPage' is defined but never used.","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]